data <- data[1:20,]
## Define variables
n = 20
alpha_1 <- 0.7
alpha_2 <- 0.3
P_toul_16 <- data[17,4]
P_psg_16 <- data[1,4]
#print(P_psg_16)
data$Qual <- c(rep(0,20))
data$Form <- c(rep(0,20))
max_diff <- c(rep(0,20))
diff_curr <- c(rep(0,20))
diff_futur <- c(rep(0,20))
coeff_diff <- c(rep(0,20))
## Fill team quality score
data$Qual[1:20] <- (1-((P_psg_16 - data$Points.2015.16[1:20])/P_psg_16))*P_toul_16
## Fill current form score
max_diff[1:20] <- 187 - (20 - data$Standings.2016.17[1:20])
#match difficulty matrix
diff_curr[1:20] <- sum()
coeff_diff()
data$Form[1:20] <- Ma
raw_data <- read.csv("/Users/augustin/Documents/Programming/Les4F - FinalProject/Data/Ligue1-data.csv", header = TRUE, sep = ";")
View(raw_data)
data <- raw_data[1:20,c("X","X.1","Standings.2015.16","Points.2015.16","Standings.2016.17","Points.2016.17","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10")]
n = 20
alpha_1 <- 0.7
alpha_2 <- 0.3
P_toul_16 <- data[,4]
P_psg_16 <- data[3,4]
#print(P_psg_16)
data$Qual <- c(rep(0,20))
data$Form <- c(rep(0,20))
max_diff <- c(rep(0,20))
diff_curr <- c(rep(0,20))
diff_futur <- c(rep(0,20))
coeff_diff <- c(rep(0,20))
data$Qual[1:20] <- (1-((P_psg_16 - data$Points.2015.16[1:20])/P_psg_16))*P_toul_16
max_diff[1:20] <- 187 - (20 - data$Standings.2016.17[1:20])
diff_curr[1:20] <- sum(data[1:20,data$M1:data$M2])
for(i in 1:20){
for(j in 1:10){
diff_curr[i] <- sum(data[i,data$M1:data$M2])
}
}
for(i in 1:20){
data$diff_curr[i] <- sum(data[i,data$M1:data$M2])
}
data$diff_curr[i] <- sum(data[i,data$M1:data$M10])
for(i in 1:20){
data$diff_curr[i] <- sum(data[i,data$M1:data$M10])
}
for(i in 1:20){
data$diff_curr[i] <- sum(c(data[i,data$M1:data$M10])
}
data$diff_curr[i] <- sum(c(data[i,data$M1:data$M10]))
for(i in 1:20){
data$diff_curr[i] <- sum(c(data[i,data$M1:data$M10]))
}
data$diff_curr[1:20] <- sum(c(data[i,data$M1:data$M10]))
data$diff_curr[1:20] <- sum(c(data[,data$M1:data$M10]))
for(i in 1:20){
data$diff_curr[i] <- sum(data[i,data$M1:data$M10])
}
for(i in 1:20){
for(j in 1:10){
data$diff_curr[i] <- sum(data[i, j +7])
}
}
diff_curr[i] <- sum(data[i,data$M1]:data[i,data$M2])
diff_curr[i] <- sum(data[i,"M1"]:data[i,"M2"])
for(i in 1:20){
diff_curr[i] <- sum(data[i,"M1"]:data[i,"M2"])
}
diff_curr[1:20] <- c(data[i,"M1"]:data[i,"M2"]
diff_curr[1:20] <- c(data[i,"M1"]:data[i,"M2"])
diff_curr <- c(rep(0,20))
diff_curr[1:20] <- c(data[i,"M1"]:data[i,"M2"])
diff_curr[1:20] <- c(data[1:20,"M1"]:data[1:20,"M2"])
diff_curr[1] <- c(data[1,"M1"]:data[1,"M2"])
diff_curr <- c(data[1,"M1"]:data[1,"M2"])
diff_curr <- c(rep(0,20))
diff_curr[1] <- sum(data[1,"M1"]:data[1,"M10"])
v1 <- c(data[1,"M1"]:data[1,"M10"])
diff_curr[1] <- sum(data[1,data$M1]:data[1,data$M10])
v1 <- c(data[1,data$M1]:data[1,data$M10])
v1 <- c(data[1,'M1']:data[1,data'M10'])
v1 <- c(data[1,'M1']:data[1,data,'M10'])
v1 <- c(data[1,'M1']:data[1,data,'M10'])
v1 <- data[1,'M1']:data[1,data,'M10']
v1 <- data[1,'M1']:data[1,'M10']
P_toul_16 <- data[4,4]
v1 <- as.numeric(data[1,'M1']:data[1,'M10'])
data[1,'M1']
data[1,'M4']
data[1,'M2']
data[1,'M3']
v1 <- as.numeric(data[1,6:15])
v1 <- as.numeric(data[1,7:16])
v1 <- as.numeric(data[1,'M1':'M10'])
v1 <- as.numeric(data[1,'M1':'M10'])
v1 <- as.numeric(data[1,'M1:M10'])
v1 <- as.numeric(data[1,M1:M10])
v1 <- as.numeric(data[1,'M1']:data[1,'M10'])
v1 <- as.numeric(data[1,7:16])
diff_curr[1] <- sum(as.numeric(data[1,7:16]))
diff_curr[1:20] <- sum(as.numeric(data[1:20,7:16]))
for(i in 1:20){
diff_curr[i] <- sum(as.numeric(data[i,7:16]))
}
diff_curr[i] <- sum((20 - as.numeric(data[i,7:16]))/2 )
for(i in 1:20){
diff_curr[i] <- sum((20 - as.numeric(data[i,7:16]))/2 )
}
diff_futur <- max_diff - diff_curr
diff_curr[i] <- sum(20 - as.numeric(data[i,7:16])/2)
diff_futur <- max_diff - diff_curr
coeff_diff <- (diff_futur/diff_curr)*data$Points.2016.17 + data$Points.2016.17
coeff_diff <- (diff_futur/diff_curr)
data$Form[1:20] <- alpha_2 * (coeff_diff*data$Points.2016.17 + data$Points.2016.17)
data$PointsPredicted <- alpha_1*data$Qual + alpha_2*data$Form
data$PointsPredicted <- round(alpha_1*data$Qual + alpha_2*data$Form, digits = 0)
output_data <- data[,c("X.1","Points.2015.16","Points.2016.17","PointsPredicted")]
View(output_data)
output_data <- output_data[order(PointsPredicted),]
output_data <- data[,c("X.1","Points.2015.16","Points.2016.17","PointsPredicted")]
output_data <- output_data[order(PointsPredicted),]
output_data <- output_data[order("PointsPredicted"),]
output_data <- data[,c("X.1","Points.2015.16","Points.2016.17","PointsPredicted")]
hist(output_data)
hist(output_data$PointsPredicted,labels = output_data$X.1)
hist(output_data$PointsPredicted,x = output_data$X.1)
counts <- table(output_data$X.1, output_data$PointsPredicted)
barplot(counts, main="Ligue 1 prediction",
xlab="Team name", col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE)
barplot(output_data$PointsPredicted,names.arg = output_data$X.1)
ggplot(output_data, aes(x = X.1, y = PointsPredicted))
library(ggplot2)
ggplot(output_data, aes(x = X.1, y = PointsPredicted))
ggplot(output_data, aes(x = X.1, y = PointsPredicted)) + geom_bar(stat="identity", width=0.5)
ggplot(output_data, aes(x = X.1, y = PointsPredicted)) + geom_bar(stat="identity", width=0.5)
sort.list(output_data$PointsPredicted)
order(outputdata$PointsPredicted")
order(outputdata$PointsPredicted)
sort_output_data <- output_data[order(PointsPredicted), ]
output_data <- data[,c("X.1","Points.2015.16","Points.2016.17","PointsPredicted")]
output_data <- data[ ,c("X.1","Points.2015.16","Points.2016.17","PointsPredicted")]
sort_output_data <- output_data[order(PointsPredicted), ]
sort_output_data <- output_data[order("PointsPredicted"), ]
View(sort_output_data)
sort_output_data <- output_data[ ,order("PointsPredicted")]
sort_output_data <- output_data[ ,order("PointsPredicted")]
output_data <- data[ ,c("X.1","Points.2015.16","Points.2016.17","PointsPredicted")]
sort_output_data <- output_data[ ,order("PointsPredicted")]
output_data[1:10]
output_data[1:10,]
sorted_output <- output_data[order("PointsPredicted"),]
attach(output_data)
sorted_output <- output_data[order("PointsPredicted"),]
View(sorted_output)
sorted_output <- output_data[order(PointsPredicted), ]
View(sorted_output)
sorted_output <- output_data[order(PointsPredicted, decreasing = TRUE), ]
View(sorted_output)
output_data <- output_data[order(PointsPredicted, decreasing = TRUE), ]
View(output_data)
ggplot(output_data, aes(x = X.1, y = PointsPredicted)) + geom_bar(stat="identity", width=0.5)
output_data <- data[ ,c("X.1","Points.2015.16","Points.2016.17","PointsPredicted")]
output_data <- output_data[order(PointsPredicted, decreasing = TRUE), ]
# Grouped Bar Plot
library(ggplot2)
ggplot(output_data, aes(x = X.1, y = PointsPredicted)) + geom_bar(stat="identity", width=0.5)
ggplot(output_data) + geom_bar(stat="identity", width=0.5)
output_data
ggplot(output_data[1:5,], aes(x = X.1, y = PointsPredicted,)) + geom_bar(stat="identity", width=0.5)
View(output_data)
# Origin: Programming Fall 2016 - Final Project
# Filename: PredictLigue1.R
# Author: Les 4 Fantastriques
# Creation date: 11 Nov. 2016
# Last modified: 11 Nov. 2016
# Clear working space
rm(list=ls())
# Create dataframe
raw_data <- read.csv("/Users/augustin/Documents/Programming/Les4F - FinalProject/Data/Ligue1-data.csv", header = TRUE, sep = ";")
data <- raw_data[1:20,c("X","X.1","Standings.2015.16","Points.2015.16","Standings.2016.17","Points.2016.17","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10")]
## Define variables
n = 20
alpha_1 <- 0.7
alpha_2 <- 0.3
P_toul_16 <- data[4,4]
P_psg_16 <- data[3,4]
max_diff <- c(rep(0,20))
diff_curr <- c(rep(0,20))
diff_futur <- c(rep(0,20))
coeff_diff <- c(rep(0,20))
## 1. Fill team quality score
data$Qual[1:20] <- (1-((P_psg_16 - data$Points.2015.16[1:20])/P_psg_16))*P_toul_16
## 2. Fill current form score
#maximum difficulty of matches
max_diff[1:20] <- 187 - (20 - data$Standings.2016.17[1:20])
#current form given match played
for(i in 1:20){
diff_curr[i] <- sum(20 - as.numeric(data[i,7:16])/2)
}
#difficulty of future matches
diff_futur <- max_diff - diff_curr
#difficulty coefficient
coeff_diff <- (diff_futur/diff_curr)
# Current form score
data$Form[1:20] <- (coeff_diff*data$Points.2016.17 + data$Points.2016.17)
## 3. Assign point prediction
data$PointsPredicted <- round(alpha_1*data$Qual + alpha_2*data$Form, digits = 0)
## 4. Plot league standing
output_data <- data[ ,c("X.1","Points.2015.16","Points.2016.17","PointsPredicted")]
output_data <- output_data[order(PointsPredicted, decreasing = TRUE), ]
output_data
# Grouped Bar Plot
#library(ggplot2)
#ggplot(output_data[1:5,], aes(x = X.1, y = PointsPredicted,)) + geom_bar(stat="identity", width=0.5)
View(output_data)
match_matrix <- data[1:20,7:16]
match_diff_coeff <- function(current_points, match_matrix){
# Compute the maximum difficulty possible (team plays against all teams including self)
max_diff <- 187 - (20 - current_points)
# Compute the difficulty of first ten match played
current_diff <- sum(20 - as.numeric(match_matrix[,1:10]/2))
#Compute difficulty of future matches
diff_futur <- max_diff - current_diff
# Compute difficulty coefficient
coeff_diff <- (diff_futur/current_diff)
}
match_diff_coeff <- function(current_points, match_matrix){
# Compute the maximum difficulty possible (team plays against all teams including self)
max_diff <- 187 - (20 - current_points)
# Compute the difficulty of first ten match played
current_diff <- sum(20 - as.numeric(match_matrix[,1:10]/2))
#Compute difficulty of future matches
diff_futur <- max_diff - current_diff
# Compute difficulty coefficient
coeff_diff <- (diff_futur/current_diff)
return(coeff_diff)
}
diff_coeff[1:20] <- match_diff_coeff(data[1:20], match_matrix)
diff_coeff[1:20] <- match_diff_coeff(data[1:20], match_matrix)
match_matrix <- data[1:20,7:16]
diff_coeff <- c(rep(0,20))
diff_coeff[1:20] <- match_diff_coeff(data[1:20], match_matrix)
diff_coeff[1:20] <- match_diff_coeff(data[1:20,6], match_matrix)
match_diff_coeff <- function(current_points, match_matrix){
# Define variables
n <- length(current_points)
max_diff <- c(rep(0, n))
current_diff <- c(rep(0, n))
diff_futur <- c(rep(0, n))
coeff_diff <- c(rep(0, n))
# Compute the maximum difficulty possible (team plays against all teams including self)
max_diff <- 187 - (20 - current_points)
# Compute the difficulty of first ten match played
current_diff <- sum(20 - as.numeric(match_matrix[,1:10]/2))
#Compute difficulty of future matches
diff_futur <- max_diff - current_diff
# Compute difficulty coefficient
coeff_diff <- (diff_futur/current_diff)
return(coeff_diff)
}
diff_coeff[1:20] <- match_diff_coeff(data[1:20,6], match_matrix)
current_points <- data[1:20,6]
diff_coeff[1:20] <- match_diff_coeff(current_points, match_matrix)
current_p <- data[1:20,6]
diff_coeff[1:20] <- match_diff_coeff(current_p, match_matrix)
current_p <- lapply(data[1:20,6], as.numeric)
diff_coeff[1:20] <- match_diff_coeff(current_p, match_matrix)
diff_coeff
diff_coeff <- match_diff_coeff(current_p, match_matrix)
current_p <- data[1:20,6]
current_p <- as.matrix(data[1:20,6])
diff_coeff <- match_diff_coeff(current_p, match_matrix)
match_matrix <- as.matrix(data[1:20,7:16])
diff_coeff <- c(rep(0,20))
current_p <- as.matrix(data[1:20,6])
diff_coeff <- match_diff_coeff(current_p, match_matrix)
diff_coeff
rm(list=ls())
raw_data <- read.csv("/Users/augustin/Documents/Programming/Les4F/Data/Ligue1-data.csv", header = TRUE, sep = ";")
data <- raw_data[1:20,c("ID","Team.Name","Standings.2015.16","Points.2015.16","Standings.2016.17","Points.2016.17","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10")]
score_team_qual <- function(team_points, leader_points, last_points){
qual_score <- (1-((leader_points - team_points)/ leader_points))*last_points
return(qual_score)
}
#' Team Quality Score function
#'
#' This function assigns a score evaluating the general quality
#' of a team based on its previous season relative standings.
#'
#' [INSERT MOTIVATION OF QUALITY SCORE FORMULA]
#'
#' Formula:
#' Team_i score = (1 - (Leader points - Team_i points) / leader points ) * last team points
#'
#' @export
#' @examples
#' score_team_qual()
score_team_qual <- function(team_points, leader_points, last_team_points){
qual_score <- (1-((leader_points - team_points)/ leader_points))*last_points
return(qual_score)
}
score_team_qual(data$Points.2015.16, Points_psg_16, Points_toul_16)
n = 20
alpha_1 <- 0.7
alpha_2 <- 0.3
Points_toul_16 <- data[4,4]
Points_psg_16 <- data[3,4]
output_data <- data
output_data$Qual.Score <- score_team_qual(data$Points.2015.16, Points_psg_16, Points_toul_16)
Points_toul_16 <- data[4,4]
Points_psg_16 <- data[3,4]
output_data$Qual.Score <- score_team_qual(data$Points.2015.16, Points_psg_16, Points_toul_16)
output_data$Qual.Score <- score_team_qual(data$Points.2015.16, Points_psg_16, Points_toul_16)
#' Team Quality Score function
#'
#' This function assigns a score evaluating the general quality
#' of a team based on its previous season relative standings.
#'
#' [INSERT MOTIVATION OF QUALITY SCORE FORMULA]
#'
#' Formula:
#' Team_i score = (1 - (Leader points - Team_i points) / leader points ) * last team points
#'
#' @export
#' @examples
#' score_team_qual()
score_team_qual <- function(team_points, leader_points, last_team_points){
qual_score <- (1-((leader_points - team_points)/ leader_points))*last_team_points
return(qual_score)
}
output_data$Qual.Score <- score_team_qual(data$Points.2015.16, Points_psg_16, Points_toul_16)
View(output_data)
#' Match Difficulty Coefficient function
#'
#' This function assigns a score evaluating the current form
#' of all teams based on the first ten results of the current season.
#'
#' [INSERT MOTIVATION OF DIFFICULTY COEFF COMPUTATION]
#'
#' Formula:
#' [INSERT FORMULA]
#'
#' @export
#' @examples
#' match_diff_coeff()
match_diff_coeff <- function(current_points, match_matrix){
# Define variables
n <- length(current_points)
max_diff <- c(rep(0, n))
current_diff <- c(rep(0, n))
diff_futur <- c(rep(0, n))
coeff_diff <- c(rep(0, n))
# Compute the maximum difficulty possible (team plays against all teams including self)
max_diff <- 187 - (20 - current_points)
# Compute the difficulty of first ten match played
current_diff <- sum(20 - as.numeric(match_matrix[,1:10]/2))
#Compute difficulty of future matches
diff_futur <- max_diff - current_diff
# Compute difficulty coefficient
coeff_diff <- (diff_futur/current_diff)
return(coeff_diff)
}
output_data <- data[ ,c("ID","Team.Name","Points.2015.16","Points.2016.17")]
output_data$Qual.Score <- score_team_qual(data$Points.2015.16, Points_psg_16, Points_toul_16)
#' Match Difficulty Coefficient function
#'
#' This function assigns a score evaluating the current form
#' of all teams based on the first ten results of the current season.
#'
#' [INSERT MOTIVATION OF DIFFICULTY COEFF COMPUTATION]
#'
#' Formula:
#' [INSERT FORMULA]
#'
#' @export
#' @examples
#' match_diff_coeff()
match_diff_coeff <- function(current points, match matrix){
# Define variables
n <- length(current_points)
max_diff <- c(rep(0, n))
current_diff <- c(rep(0, n))
diff_futur <- c(rep(0, n))
coeff_diff <- c(rep(0, n))
# Compute the maximum difficulty possible (team plays against all teams including self)
max_diff <- 187 - (20 - current_points)
# Compute the difficulty of first ten match played
current_diff <- sum(20 - as.numeric(match_matrix[,1:10]/2))
#Compute difficulty of future matches
diff_futur <- max_diff - current_diff
# Compute difficulty coefficient
coeff_diff <- (diff_futur/current_diff)
return(coeff_diff)
}
match_matrix <- as.matrix(data[1:20,7:16])
current_points <- as.matrix(data[1:20,6])
coeff_diff <- match_diff_coeff(current_points, match_matrix)
View(coeff_diff)
diff_coeff <- match_diff_coeff(current_points, match_matrix)
#maximum difficulty of matches
max_diff[1:20] <- 187 - (20 - data$Standings.2016.17[1:20])
#current form given match played
for(i in 1:20){
diff_curr[i] <- sum(20 - as.numeric(data[i,7:16])/2)
}
#difficulty of future matches
diff_futur <- max_diff - diff_curr
#difficulty coefficient
coeff_diff <- (diff_futur/diff_curr)
diff_curr <- c(rep(0,20))
max_diff[1:20] <- 187 - (20 - data$Standings.2016.17[1:20])
for(i in 1:20){
diff_curr[i] <- sum(20 - as.numeric(data[i,7:16])/2)
}
diff_futur <- max_diff - diff_curr
coeff_diff <- (diff_futur/diff_curr)
match_diff_coeff <- function(current_points, match_matrix){
# Define variables
n <- length(current_points)
max_diff <- c(rep(0, n))
current_diff <- c(rep(0, n))
diff_futur <- c(rep(0, n))
coeff_diff <- c(rep(0, n))
# Compute the maximum difficulty possible (team plays against all teams including self)
max_diff <- 187 - (20 - current_points)
# Compute the difficulty of first ten match played
current_diff <- sum(20 - as.numeric(match_matrix[,1:10]/2))
current_diff
#Compute difficulty of future matches
diff_futur <- max_diff - current_diff
# Compute difficulty coefficient
coeff_diff <- (diff_futur/current_diff)
return(coeff_diff)
}
match_diff_coeff(current_points, match_matrix)
max_diff <- 187 - (20 - current_points)
max_diff
rm(list=ls())
raw_data <- read.csv("/Users/augustin/Documents/Programming/Les4F/Data/Ligue1-data.csv", header = TRUE, sep = ";")
data <- raw_data[1:20,c("ID","Team.Name","Standings.2015.16","Points.2015.16","Standings.2016.17","Points.2016.17","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10")]
match_matrix <- as.matrix(data[1:20,7:16])
current_points <- as.matrix(data[1:20,6])
#Define Var
n <- length(current_points)
max_diff <- c(rep(0, n))
current_diff <- c(rep(0, n))
diff_futur <- c(rep(0, n))
coeff_diff <- c(rep(0, n))
View(current_points)
max_diff <- 187 - (20 - current_points)
max_diff
current_diff <- sum(20 - as.numeric(match_matrix[,1:10]/2))
current_diff
current_diff <- sum(20 - (match_matrix[,1:10]/2))
current_diff <- c(rep(0, n))
current_diff <- sum(20 - (match_matrix[,1:10]/2))
current_diff[i] <- sum(20 - (match_matrix[i,1:10]/2))
for(i in 1:20){
current_diff[i] <- sum(20 - (match_matrix[i,1:10]/2))
}
diff_futur <- max_diff - current_diff
View(diff_futur)
coeff_diff <- (diff_futur/current_diff)
View(coeff_diff)
#' Match Difficulty Coefficient function
#'
#' This function assigns a score evaluating the current form
#' of all teams based on the first ten results of the current season.
#'
#' [INSERT MOTIVATION OF DIFFICULTY COEFF COMPUTATION]
#'
#' Formula:
#' [INSERT FORMULA]
#'
#' @export
#' @examples
#' match_diff_coeff()
match_diff_coeff <- function(current_points, match_matrix){
# Define variables
n <- length(current_points)
max_diff <- c(rep(0, n))
current_diff <- c(rep(0, n))
diff_futur <- c(rep(0, n))
coeff_diff <- c(rep(0, n))
# Compute the maximum difficulty possible (team plays against all teams including self)
max_diff <- 187 - (20 - current_points)
# Compute the difficulty of first ten match played
# Note: Couldn't find a way to get rid of the for-loop, if anyone has an idea...
for(i in 1:n){
current_diff[i] <- sum(20 - as.numeric(match_matrix[i,1:10]/2))
}
#Compute difficulty of future matches
diff_futur <- max_diff - current_diff
# Compute difficulty coefficient
coeff_diff <- (diff_futur/current_diff)
return(coeff_diff)
}
rm(list=ls())
dir <- "/Users/augustin/Desktop/Les4F-master/"
install.packages("PredictL1Package", dir)
install.packages("PredictL1Package", dir)
package.skeleton(name=name, path=dir)
dir <- "/Users/augustin/Documents/Programming/Les4F/"
name <- "TestPackage"
package.skeleton(name=name, path=dir)
